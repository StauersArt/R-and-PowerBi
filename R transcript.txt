R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(readr)
> HollywoodsMostProfitableStories <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(HollywoodsMostProfitableStories)
> install.packages("tidyverse")
WARNING: Rtools is required to build R packages but is not currently installed. Please download and install the appropriate version of Rtools before proceeding:

https://cran.rstudio.com/bin/windows/Rtools/
Installing package into ‘C:/Users/Dell Latitude/AppData/Local/R/win-library/4.2’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/4.2/tidyverse_1.3.2.zip'
Content type 'application/zip' length 428987 bytes (418 KB)
downloaded 418 KB

package ‘tidyverse’ successfully unpacked and MD5 sums checked

The downloaded binary packages are in
	C:\Users\Dell Latitude\AppData\Local\Temp\RtmpUNj3ab\downloaded_packages
> library(tidyverse)
── Attaching packages ──────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.4.0      ✔ dplyr   1.0.10
✔ tibble  3.1.8      ✔ stringr 1.4.1 
✔ tidyr   1.2.1      ✔ forcats 0.5.2 
✔ purrr   0.3.5      
── Conflicts ─────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> str(df)
function (x, df1, df2, ncp, log = FALSE)  
> colSums(is.na(df))
Error in colSums(is.na(df)) : 
  'x' must be an array of at least two dimensions
In addition: Warning message:
In is.na(df) : is.na() applied to non-(list or vector) of type 'closure'
> str(df)
function (x, df1, df2, ncp, log = FALSE)  
> library(readr)
> df <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df)
> str(df)
spc_tbl_ [74 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
 $ Film             : chr [1:74] "27 Dresses" "(500) Days of Summer" "A Dangerous Method" "A Serious Man" ...
 $ Genre            : chr [1:74] "Comedy" "Comedy" "Drama" "Drama" ...
 $ Lead Studio      : chr [1:74] "Fox" "Fox" "Independent" "Universal" ...
 $ Audience  score %: num [1:74] 71 81 89 64 84 80 66 80 51 52 ...
 $ Profitability    : num [1:74] 5.344 8.096 0.449 4.383 0.653 ...
 $ Rotten Tomatoes %: num [1:74] 40 87 79 89 54 84 29 93 40 26 ...
 $ Worldwide Gross  : num [1:74] 160.31 60.72 8.97 30.68 29.37 ...
 $ Year             : num [1:74] 2008 2009 2011 2009 2007 ...
 - attr(*, "spec")=
  .. cols(
  ..   Film = col_character(),
  ..   Genre = col_character(),
  ..   `Lead Studio` = col_character(),
  ..   `Audience  score %` = col_double(),
  ..   Profitability = col_double(),
  ..   `Rotten Tomatoes %` = col_double(),
  ..   `Worldwide Gross` = col_double(),
  ..   Year = col_double()
  .. )
 - attr(*, "problems")=<externalptr> 
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> View(HollywoodsMostProfitableStories)
> View(HollywoodsMostProfitableStories)
> View(df)
> na.omit(df)
# A tibble: 69 × 8
   Film     Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
   <chr>    <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
 1 27 Dres… Come… Fox          71   5.34       40  160.  
 2 (500) D… Come… Fox          81   8.10       87   60.7 
 3 A Dange… Drama Indepe…      89   0.449      79    8.97
 4 A Serio… Drama Univer…      64   4.38       89   30.7 
 5 Across … Roma… Indepe…      84   0.653      54   29.4 
 6 Beginne… Come… Indepe…      80   4.47       84   14.3 
 7 Dear Jo… Drama Sony         66   4.60       29  115.  
 8 Enchant… Come… Disney       80   4.01       93  340.  
 9 Firepro… Drama Indepe…      51  66.9        40   33.5 
10 Four Ch… Come… Warner…      52   2.02       26  162.  
# … with 59 more rows, 1 more variable: Year <dbl>, and
#   abbreviated variable names ¹​`Lead Studio`,
#   ²​`Audience  score %`, ³​Profitability,
#   ⁴​`Rotten Tomatoes %`, ⁵​`Worldwide Gross`
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names
> head(df)
# A tibble: 6 × 8
  Film      Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
  <chr>     <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
1 27 Dress… Come… Fox          71   5.34       40  160.  
2 (500) Da… Come… Fox          81   8.10       87   60.7 
3 A Danger… Drama Indepe…      89   0.449      79    8.97
4 A Seriou… Drama Univer…      64   4.38       89   30.7 
5 Across t… Roma… Indepe…      84   0.653      54   29.4 
6 Beginners Come… Indepe…      80   4.47       84   14.3 
# … with 1 more variable: Year <dbl>, and abbreviated
#   variable names ¹​`Lead Studio`, ²​`Audience  score %`,
#   ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
# ℹ Use `colnames()` to see all variable names
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> df %>% drop_na()
# A tibble: 69 × 8
   Film     Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
   <chr>    <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
 1 27 Dres… Come… Fox          71   5.34       40  160.  
 2 (500) D… Come… Fox          81   8.10       87   60.7 
 3 A Dange… Drama Indepe…      89   0.449      79    8.97
 4 A Serio… Drama Univer…      64   4.38       89   30.7 
 5 Across … Roma… Indepe…      84   0.653      54   29.4 
 6 Beginne… Come… Indepe…      80   4.47       84   14.3 
 7 Dear Jo… Drama Sony         66   4.60       29  115.  
 8 Enchant… Come… Disney       80   4.01       93  340.  
 9 Firepro… Drama Indepe…      51  66.9        40   33.5 
10 Four Ch… Come… Warner…      52   2.02       26  162.  
# … with 59 more rows, 1 more variable: Year <dbl>, and
#   abbreviated variable names ¹​`Lead Studio`,
#   ²​`Audience  score %`, ³​Profitability,
#   ⁴​`Rotten Tomatoes %`, ⁵​`Worldwide Gross`
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> head(df)
# A tibble: 6 × 8
  Film      Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
  <chr>     <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
1 27 Dress… Come… Fox          71   5.34       40  160.  
2 (500) Da… Come… Fox          81   8.10       87   60.7 
3 A Danger… Drama Indepe…      89   0.449      79    8.97
4 A Seriou… Drama Univer…      64   4.38       89   30.7 
5 Across t… Roma… Indepe…      84   0.653      54   29.4 
6 Beginners Come… Indepe…      80   4.47       84   14.3 
# … with 1 more variable: Year <dbl>, and abbreviated
#   variable names ¹​`Lead Studio`, ²​`Audience  score %`,
#   ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
# ℹ Use `colnames()` to see all variable names
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> head(df)
# A tibble: 6 × 8
  Film      Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
  <chr>     <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
1 27 Dress… Come… Fox          71   5.34       40  160.  
2 (500) Da… Come… Fox          81   8.10       87   60.7 
3 A Danger… Drama Indepe…      89   0.449      79    8.97
4 A Seriou… Drama Univer…      64   4.38       89   30.7 
5 Across t… Roma… Indepe…      84   0.653      54   29.4 
6 Beginners Come… Indepe…      80   4.47       84   14.3 
# … with 1 more variable: Year <dbl>, and abbreviated
#   variable names ¹​`Lead Studio`, ²​`Audience  score %`,
#   ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
# ℹ Use `colnames()` to see all variable names
> df[-c(71,51,19,39,42),] %>% head()
# A tibble: 6 × 8
  Film      Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
  <chr>     <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
1 27 Dress… Come… Fox          71   5.34       40  160.  
2 (500) Da… Come… Fox          81   8.10       87   60.7 
3 A Danger… Drama Indepe…      89   0.449      79    8.97
4 A Seriou… Drama Univer…      64   4.38       89   30.7 
5 Across t… Roma… Indepe…      84   0.653      54   29.4 
6 Beginners Come… Indepe…      80   4.47       84   14.3 
# … with 1 more variable: Year <dbl>, and abbreviated
#   variable names ¹​`Lead Studio`, ²​`Audience  score %`,
#   ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
# ℹ Use `colnames()` to see all variable names
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> df[-c(71,51,19,39,42),] %>% head()
# A tibble: 6 × 8
  Film      Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
  <chr>     <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
1 27 Dress… Come… Fox          71   5.34       40  160.  
2 (500) Da… Come… Fox          81   8.10       87   60.7 
3 A Danger… Drama Indepe…      89   0.449      79    8.97
4 A Seriou… Drama Univer…      64   4.38       89   30.7 
5 Across t… Roma… Indepe…      84   0.653      54   29.4 
6 Beginners Come… Indepe…      80   4.47       84   14.3 
# … with 1 more variable: Year <dbl>, and abbreviated
#   variable names ¹​`Lead Studio`, ²​`Audience  score %`,
#   ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
# ℹ Use `colnames()` to see all variable names
> df <- df[rowSums(is.na(df)) == 0, ]
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 0 
Audience  score %     Profitability Rotten Tomatoes % 
                0                 0                 0 
  Worldwide Gross              Year 
                0                 0 
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 0 
Audience  score %     Profitability Rotten Tomatoes % 
                0                 0                 0 
  Worldwide Gross              Year 
                0                 0 
> View(df)
> library(readr)
> df <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df)
> colSums(is.na(df))
             Film             Genre       Lead Studio 
                0                 0                 1 
Audience  score %     Profitability Rotten Tomatoes % 
                1                 3                 1 
  Worldwide Gross              Year 
                0                 0 
> df <- df[-c(71,51,19,39,42),] %>% head()
> df <- df[-c(19,39,42,51,71),] %>% head()
> library(readr)
> df <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df)
> df <- df[-c(19,39,42,51,71),] %>% head()
> df <- df[-c(19),] %>% head()
> library(readr)
> df <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df)
> df <- df[-c(19),] %>% head()
> library(readr)
> df <- read_csv("R projects/HollywoodsMostProfitableStories.csv")
Rows: 74 Columns: 8                                                                         
── Column specification ─────────────────────────────────
Delimiter: ","
chr (3): Film, Genre, Lead Studio
dbl (5): Audience  score %, Profitability, Rotten Tom...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> View(df)
> df <- df[rowSums(is.na(df)) == 0, ]
> dim(df[duplicated(df$Film),])[1]
[1] 0
> df$Profitability<-round(df$`Worldwide Gross`,digit=2)
> dim(df)
[1] 69  8
> library(ggplot2)
> ggplot(df,aes(x=Profitability, y="`Worldwide Gross`)) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
Error: unexpected symbol in "ggplot(df,aes(x=Profitability, y="`Worldwide Gross`)) + geom_boxplot(outlier.colour="red"
> ggplot(df,aes(x=Profitability, y=`Worldwide Gross`)) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
Warning message:
Continuous x aesthetic
ℹ did you forget `aes(group = ...)`? 
> ggplot(df,aes(x=Profitability, y=Worldwide.Gross)) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
Error in `geom_boxplot()`:
! Problem while computing aesthetics.
ℹ Error occurred in the 1st layer.
Caused by error in `FUN()`:
! object 'Worldwide.Gross' not found
Run `rlang::last_error()` to see where the error occurred.
> ggplot(df,aes(x=Profitability, y="Worldwide Gross")) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
> ggplot2(df,aes(x=Profitability, y="Worldwide Gross")) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
Error in ggplot2(df, aes(x = Profitability, y = "Worldwide Gross")) : 
  could not find function "ggplot2"
> ggplot(df,aes(x=Profitability, y='Worldwide Gross')) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
> ggplot(df,aes(x=Profitability, y=`Worldwide Gross`)) + geom_boxplot(outlier.colour="red", outlier.shape=1) + scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,1000))
Warning message:
Continuous x aesthetic
ℹ did you forget `aes(group = ...)`? 
> Q1 <-quantile(df$Profitability, .25)
> Q3 <-quantile(df$Profitability, .75)
> IQR <- IQR(df$Profitability)
> no_outliers <- subset(df, df$Profitability> (Q1-1.5*IQR) & df$Profitability< (Q3+1.5*IQR))
> dim(no_outliers)
[1] 65  8
> Q1a <-quantile(no_outliers$`Worldwide Gross`, .25)
> Q3 <-quantile(no_outliers$`Worldwide Gross`, .75)
> Q3 <-quantile(df$Profitability, .75)
> Q3a <-quantile(no_outliers$`Worldwide Gross`, .75)
> IQRa <- IQR(no_outliers$`Worldwide Gross`)
> df1<-subset(no_outliers, no_outliers$`Worldwide Gross`>(Q1a-1.5IQRa) & no_outliers$`Worldwide Gross`<(Q3a+1.5*IQRa))
Error: unexpected symbol in "df1<-subset(no_outliers, no_outliers$`Worldwide Gross`>(Q1a-1.5IQRa"
> df1<-subset(no_outliers, no_outliers$(`Worldwide Gross`)>(Q1a-1.5IQRa) & no_outliers$`Worldwide Gross`<(Q3a+1.5*IQRa))
Error: unexpected '(' in "df1<-subset(no_outliers, no_outliers$("
> df1<-subset(no_outliers, no_outliers$`Worldwide Gross`>(Q1a-1.5IQRa) & no_outliers$`Worldwide Gross`<(Q3a+1.5*IQRa))
Error: unexpected symbol in "df1<-subset(no_outliers, no_outliers$`Worldwide Gross`>(Q1a-1.5IQRa"
> df1<-subset(no_outliers, no_outliers$`Worldwide Gross`>(Q1a-1.5*IQRa) & no_outliers$`Worldwide Gross`<(Q3a+1.5*IQRa))
> dim(df1)
[1] 63  8
> View(df1)
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'..))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: unexpected symbol in "ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'.."
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x=Year))+geom_bar()
> write.csv(df1,'clean_df.csv')
> df[complete.cases(df), ]
# A tibble: 69 × 8
   Film     Genre Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵
   <chr>    <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl>
 1 27 Dres… Come… Fox          71  160.        40  160.  
 2 (500) D… Come… Fox          81   60.7       87   60.7 
 3 A Dange… Drama Indepe…      89    8.97      79    8.97
 4 A Serio… Drama Univer…      64   30.7       89   30.7 
 5 Across … Roma… Indepe…      84   29.4       54   29.4 
 6 Beginne… Come… Indepe…      80   14.3       84   14.3 
 7 Dear Jo… Drama Sony         66  115.        29  115.  
 8 Enchant… Come… Disney       80  340.        93  340.  
 9 Firepro… Drama Indepe…      51   33.5       40   33.5 
10 Four Ch… Come… Warner…      52  162.        26  162.  
# … with 59 more rows, 1 more variable: Year <dbl>, and
#   abbreviated variable names ¹​`Lead Studio`,
#   ²​`Audience  score %`, ³​Profitability,
#   ⁴​`Rotten Tomatoes %`, ⁵​`Worldwide Gross`
# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c())+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Audience  score %', y='Rotten Tomatoes'))+geom_point()+scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(limits = c(o,7))+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error in continuous_scale(ggplot_global$y_aes, "position_c", identity,  : 
  object 'o' not found
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(limits = c(0,7))+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(limits = c(o,7))+coord_cartesian(xlim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error in continuous_scale(ggplot_global$y_aes, "position_c", identity,  : 
  object 'o' not found
> ggplot(df1,aes(x='Audience  score %', y='Rotten Tomatoes'))+geom_point()+scale_x_continuous(labels=scales::comma)+coord_cartesian(xlim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Audience  score %', y='Rotten Tomatoes'))+geom_point()+scale_x_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> ggplot(df1,aes(x='Lead Studio', y='Rotten Tomatoes'))+geom_point()+scale_y_continuous(labels=scales::comma)+coord_cartesian(ylim=c(0,110))+theme(axis.text.x=element_text(angle=90))
Error: Discrete value supplied to continuous scale
> View(df1)
> View(df1)
> View(df1)
> View(df1)
> missing <- !complete.cases(df)
> df[missing, ]
# A tibble: 0 × 8
# … with 8 variables: Film <chr>, Genre <chr>,
#   Lead Studio <chr>, Audience  score % <dbl>,
#   Profitability <dbl>, Rotten Tomatoes % <dbl>,
#   Worldwide Gross <dbl>, Year <dbl>
# ℹ Use `colnames()` to see all variable names
> df[missing,]
# A tibble: 0 × 8
# … with 8 variables: Film <chr>, Genre <chr>, Lead Studio <chr>,
#   Audience  score % <dbl>, Profitability <dbl>,
#   Rotten Tomatoes % <dbl>, Worldwide Gross <dbl>, Year <dbl>
# ℹ Use `colnames()` to see all variable names
> View(HollywoodsMostProfitableStories)
> missing <- !complete.cases(HollywoodsMostProfitableStories)
> HollywoodsMostProfitableStories[missing, ]
# A tibble: 5 × 8
  Film               Genre  Lead …¹ Audie…² Profi…³ Rotte…⁴ World…⁵  Year
  <chr>              <chr>  <chr>     <dbl>   <dbl>   <dbl>   <dbl> <dbl>
1 Jane Eyre          Roman… Univer…      77   NA         85    30.1  2011
2 No Reservations    Comedy NA           64    3.31      39    92.6  2007
3 Our Family Wedding Comedy Indepe…      49   NA         14    21.4  2010
4 Something Borrowed Roman… Indepe…      NA    1.72      NA    60.2  2011
5 When in Rome       Comedy Disney       44   NA         15    43.0  2010
# … with abbreviated variable names ¹​`Lead Studio`,
#   ²​`Audience  score %`, ³​Profitability, ⁴​`Rotten Tomatoes %`,
#   ⁵​`Worldwide Gross`
> missing <- !complete.cases(df)
> df[missing, ]
# A tibble: 0 × 8
# … with 8 variables: Film <chr>, Genre <chr>, Lead Studio <chr>,
#   Audience  score % <dbl>, Profitability <dbl>,
#   Rotten Tomatoes % <dbl>, Worldwide Gross <dbl>, Year <dbl>
# ℹ Use `colnames()` to see all variable names
> df[missing,]
# A tibble: 0 × 8
# … with 8 variables: Film <chr>, Genre <chr>, Lead Studio <chr>,
#   Audience  score % <dbl>, Profitability <dbl>,
#   Rotten Tomatoes % <dbl>, Worldwide Gross <dbl>, Year <dbl>
# ℹ Use `colnames()` to see all variable names
> 